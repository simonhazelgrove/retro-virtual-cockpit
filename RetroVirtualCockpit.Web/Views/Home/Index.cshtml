
@{
    ViewBag.Title = "Retro Virtual Cockpit";
}

<br />

<div id="connect-panel" class="row">
    <div class="col-md-12 centered">
        <div class="well">
            <p>Run the Retro Virtual Cockpit client on your computer, and enter the connection key here to connect:</p>
            <form id="connect-form" class="form-inline">
                <div class="form-group">
                    <label for="connect-key">Connection Key:</label>
                    <input name="connect-key" id="connect-key" type="text" class="form-control" required pattern="[A-Z]{8}" placeholder="XXXXXXXX" style="text-transform: uppercase;">
                </div>
                <button id="connect-button" type="submit" class="btn btn-default">Connect</button>
            </form>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12 centered">
        <div class="well">
            <div class="pull-left">
                <span id="connected-icon" class="glyphicon glyphicon-flash text-muted large-icon"></span>
            </div>
            <div class="pull-right">
                <div class="dropdown">
                    <button class="btn btn-default dropdown-toggle" type="button" id="menu-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                        <span id="menu-icon" class="glyphicon glyphicon-cog large-icon text-muted"></span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="menu-dropdown">
                        <li id="fullscreen" class="menu-item"><a href="#"><span class="glyphicon glyphicon-fullscreen"></span>Fullscreen</a></li>
                        <li id="debug" class="menu-item"><a href="#"><span class="glyphicon glyphicon-info-sign"></span>Show Commands</a></li>
                        <li class="menu-item"><a href="#"><span class="glyphicon glyphicon-adjust"></span>Night Mode <input id="nightmode" type="checkbox" data-toggle="toggle"></a></li>
                    </ul>
                </div>
            </div>
            <div class="text-center">
                <div class="btn-group">
                    <button class="btn btn-default btn-lg dropdown-toggle text-muted" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="text-muted"><span id="configName">Select configuration...</span> <span class="caret"></span></span>
                    </button>
                    <ul id="configMenu" class="dropdown-menu">
                    </ul>
                </div>
            </div>
            <span id="error-text" class="error"></span>
            <span id="messageCode" class="hidden"></span>
        </div>
    </div>
</div>

<div id="virtual-cockpit"></div>

<audio id="switch-sound">
    <source src="@Url.Content("~/Content/Sounds/switch.wav")" type="audio/mpeg">
</audio>

<audio id="bump-sound">
    <source src="@Url.Content("~/Content/Sounds/bump.wav")" type="audio/mpeg">
</audio>

<script language="javascript">

    /* Cookies */

    var setCookie = function (name, value, days) {
        var expires;
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
        }
        else {
            expires = "";
        }
        var cookieValue = name + "=" + value + expires + "; path=/";
        document.cookie = cookieValue;
    }

    function getCookie(c_name) {
        if (document.cookie.length > 0) {
            c_start = document.cookie.indexOf(c_name + "=");
            if (c_start != -1) {
                c_start = c_start + c_name.length + 1;
                c_end = document.cookie.indexOf(";", c_start);
                if (c_end == -1) {
                    c_end = document.cookie.length;
                }
                return unescape(document.cookie.substring(c_start, c_end));
            }
        }
        return "";
    }

    /* WebSockets */

    // https://www.html5rocks.com/en/tutorials/websockets/basics/

    var connection = null;

    function logError(errorText) {
        console.log(errorText);
        document.getElementById("error-text").textContent = errorText;
    }

    function decodeConnectKey(clientCode) {
        var decoded = "";
        var codex = "";

        for (var i = 0; i < 5; i++) {
            codex += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        }

        for (var i = 0; i < 4; i++) {
            var num = 16 * codex.indexOf(clientCode[0]);

            codex = codex.slice(16);
            clientCode = clientCode.slice(1);

            num += codex.indexOf(clientCode[0]);

            codex = codex.slice(16);
            clientCode = clientCode.slice(1);

            decoded += num;

            if (i < 3) {
                decoded += ".";
            }
        }

        return decoded;
    }

    function connect() {
        var connectKey = document.getElementById("connect-key").value;
        var ip = decodeConnectKey(connectKey.toUpperCase());

        connection = new WebSocket("ws://" + ip + ":6437");

        connection.onopen = function () {
            $("#connect-panel").slideToggle(1000);
            $("#connected-icon").toggleClass("text-muted");
            $("#connected-icon").toggleClass("text-warning");
            $("#error-text").text("");
        };

        // Log errors
        connection.onerror = function (error) {
            window.logError("Connection error - is the client running?");
        };

        // Log messages from the server
        connection.onmessage = function (e) {
            window.logError("Server: " + e.data);
        };
    }

    var logFade = null;
    var logElement = null;

    $(function () {
        logElement = $("#messageCode");
    });

    function logMessage(message) {
        if (logFade != null) {
            clearTimeout(logFade);
        }

        logElement.text(message);
        logElement.animate({ opacity: 1 }, 100);

        logFade = setTimeout("fadeOutLog();", 3000);
    }

    function fadeOutLog() {
        logElement.animate({ opacity: 0 }, 1000);
        logFade = null;
    }

    function sendMessage(value) {
        logMessage(value);
        if (connection != null) {
            connection.send(value);
        }
    }

    /* Sounds */

    var switchSound = document.getElementById("switch-sound");
    var bumpSound = document.getElementById("bump-sound");

    /* Control Setup */

    function setupButtonControl(control, config) {
        control.on("click", function (event) {
            bumpSound.play();
            if (config.press) {
                sendMessage(config.press);
            }
        });
    }

    function setupHorizontalButtonControl(control, config) {
        control.on("click", function (event) {
            bumpSound.play();
            var middleX = control.width() / 2;
            var offsetX = control.offset().left;
            var posX = event.pageX - offsetX;
            if (posX >= middleX && config.right) {
                sendMessage(config.right);
            } else if (posX < middleX && config.left) {
                sendMessage(config.left);
            }   
        });
    }

    function setupSwitchControl(control, config) {
        control = control.find("div");
        control.on("click", function (event) {

            switchSound.play();

            if (config.flip) {
                sendMessage(config.flip);
            }

            if (control.hasClass("on")) {
                if (config.off) {
                    sendMessage(config.off);
                }
            } else {
                if (config.on) {
                    sendMessage(config.on);
                }
            }
            control.toggleClass("on");
        });
    }

    function setupKnobControl(control, config) {
        control = control.find("div");
        control.on("click", function (event) {
            bumpSound.play();

            if (config.turn) {
                sendMessage(config.turn);
            }

            // Rotate control
            var rotation = control.data("rotate");
            if (!rotation) rotation = 0;
            rotation += 20;
            control.css({ 'transform': 'rotate(' + rotation + 'deg)' });
            control.data("rotate", rotation);
        });
    }

    function setupThrottleControl(control, config) {
        // Double click top or bottom of throttle to set to min / max
        if (config.min || config.max) {
            var middleY = control.height() / 2;
            var offsetY = control.offset().top;
            control.on("dblclick", function (event) {
                var posY = event.pageY - offsetY;
                if (posY >= middleY && config.min) {
                    sendMessage(config.min);
                    handle.animate({ top: 40 }, 200);
                } else if (posY < middleY && config.max) {
                    sendMessage(config.max);
                    handle.animate({ top: -40 }, 200);
                }
            });
        }
        // Nudge throttle up & down by swiping 
        if (config.up || config.down) {
            var handle = control.find(".throttle-handle");

            handle.on("swipeup", function (event) {
                handle.animate({ top: -40 }, 200)
                      .animate({ top: 0 }, 200);
                sendMessage(config.up);
            });
            handle.on("swipedown", function (event) {
                handle.animate({ top: 40 }, 200)
                      .animate({ top: 0 }, 200);
                sendMessage(config.down);
            });
            
            var dragStartY = 0;
            var dragY = 0;

            handle.on("mousedown", function (event) {
                dragStartY = event.pageY;
                $(document).on("mousemove", function (event) {
                    // During drag
                    dragY = event.pageY - dragStartY;
                    dragY = Math.max(Math.min(dragY, 40), -40);
                    handle.css("top", dragY + "px");
                });
                $(document).on("mouseup", function (event) {
                    // End drag
                    $(document).off("mousemove");
                    $(document).off("mouseup");
                    if (dragY < 0 && config.up) {
                        sendMessage(config.up);
                    } else if (dragY > 0 && config.down) {
                        sendMessage(config.down);
                    }
                    handle.animate({ top: 0 }, 200);
                });
            });

        }
    }

    function setupHandleControl(control, config) {
        if (config.pull) {
            // Pull handle by swiping down
            control.on("swipedown", function (event) {
                control.animate({ top: 20 }, 200)
                      .animate({ top: 0 }, 200);
                sendMessage(config.pull);
            });
            // Pull handle by dragging down
            control.on("mousedown", function (event) {
                var dragStartY = event.pageY;
                var dragY = 0;
                $(document).on("mousemove", function (event) {
                    // During drag
                    dragY = event.pageY - dragStartY;
                    dragY = Math.max(Math.min(dragY, 20), 0);
                    control.css("top", dragY + "px");
                });
                $(document).on("mouseup", function (event) {
                    // End drag
                    $(document).off("mousemove");
                    $(document).off("mouseup");
                    if (dragY == 20) {
                        sendMessage(config.pull);
                    }
                    control.animate({ top: 0 }, 200);
                });
            });
        }
    }

    function setupDpadControl(control, config) {
        control.on("click", function (event) {
            bumpSound.play();
            var thirdX = control.width() / 3;
            var thirdY = control.height() / 3;
            var offsetX = control.offset().left;
            var offsetY = control.offset().top;
            var posX = Math.floor((event.pageX - offsetX) / thirdX);
            var posY = Math.floor((event.pageY - offsetY) / thirdY);
            if (posY == 0 && config.up) {
                sendMessage(config.up);
            } else if (posY == 2 && config.down) {
                sendMessage(config.down);
            }
            if (posX == 0 && config.left) {
                sendMessage(config.left);
            } else if (posX == 2 && config.right) {
                sendMessage(config.right);
            }
        });
    }

    function configureControl(config) {
        var control = $("#" + config.id);

        switch (config.type) {
            case "button": setupButtonControl(control, config); break;
            case "button-h": setupHorizontalButtonControl(control, config); break;
            case "switch": setupSwitchControl(control, config); break;
            case "knob": setupKnobControl(control, config); break;
            case "throttle": setupThrottleControl(control, config); break;
            case "handle": setupHandleControl(control, config); break;
            case "button-dpad": setupDpadControl(control, config); break;
        }
    }

    function addControl(config, container) {
        var slot = $("<div>", { class: "control-slot" });
        if (config.decoration) {
            slot.addClass(config.decoration);
        }
        var control = $("<div>", { class: "control " + config.type });
        slot.append(control);
        switch (config.type) {
            case "button":
            case "button-red":
            case "button-h":
            case "button-dpad":
            case "switch":
            case "knob":
                if (config.label) {
                    slot.append($("<p>" + config.label + "</p>"));
                }
                break;
            case "throttle":
                control.append($("<div>", { class: "throttle-base" }));
                control.append($("<div>", { class: "throttle-handle" }));
                break;
            case "handle":
                slot.id = "controls-eject";
                slot.addClass("centered");
                slot.addClass("large");
                slot.addClass("control");
                if (config.label) {
                    control.append($("<p>" + config.label + "</p>"));
                }
                break;
        }
        return slot;
    }

    function setupControl(config, container) {
        if (config.controls) {
            setupPanel({
                decoration: "none",
                align: "horizontal",
                controls: config.controls
            }, container);
        } else {
            var control = addControl(config, container);
            config.id = control.id;
            switch (config.type) {
                case "button": 
                case "button-red":
                    setupButtonControl(control, config);
                    break;
                case "button-h": setupHorizontalButtonControl(control, config); break;
                case "switch": setupSwitchControl(control, config); break;
                case "knob": setupKnobControl(control, config); break;
                case "throttle": setupThrottleControl(control, config); break;
                case "handle": setupHandleControl(control, config); break;
                case "button-dpad": setupDpadControl(control, config); break;
            }
            container.append(control);
        }
    }

    function setupPanel(config, container) {
        var panel = $("<div>", { class: "control-panel" });
        if (config.orientation) {
            panel.addClass(config.orientation);
        }
        if (config.align) {
            panel.addClass(config.align);
        }
        if (!config.decoration || config.decoration != "none") {
            panel.append("<span class='screw top-left'></span>");
            panel.append("<span class='screw bottom-left'></span>");
        }
        if (config.title) {
            panel.append("<h1>" + config.title + "</h1>");
        }
        config.controls.forEach(function (controlConfig) { setupControl(controlConfig, panel) });
        if (!config.decoration || config.decoration != "none") {
            panel.append("<span class='screw top-right'></span>");
            panel.append("<span class='screw bottom-right'></span>");
        }
        container.append(panel);
    }

    function setupPanelRow(config, container) {
        var panelRow = $("<div>", { class: "control-panel-row" });
        config.panels.forEach(function (panelConfig) { setupPanel(panelConfig, panelRow) });
        container.append(panelRow);
    }

    function setupCockpit(config) {
        var container = $("#virtual-cockpit");
        container.empty();
        config.panelRows.forEach(function (panelRowConfig) { setupPanelRow(panelRowConfig, container) });
    }

    function setupConfigMenu(configs) {
        var configMenu = $("#configMenu");
        configs.forEach(function(config) {
            var link = $("<li class='menu-item'><a href='#'>" + config.title + "</a></li>");
            link.click(function () {
                setupCockpit(config);
                $("#configName").text(config.title);
            });
            configMenu.append(link);
        });
    }

    function requestFullScreen(element) {
        // Supports most browsers and their versions.
        var requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;

        if (requestMethod) { // Native full screen.
            requestMethod.call(element);
        } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
            var wscript = new ActiveXObject("WScript.Shell");
            if (wscript !== null) {
                wscript.SendKeys("{F11}");
            }
        } else {
            logError("Fullscreen not supported in this browser");
        }
    }

    $(function () {

        /* Connect UI & Menu */

        $("#connect-form").submit(function (event) {
            event.preventDefault();
            setCookie("connect-key", $("#connect-key").val(), 365 * 10);
            connect();
        });

        $("#connected-icon").click(function () {
            $("#connect-panel").slideToggle(1000);
        });

        $("#connect-key").val(getCookie("connect-key"));

        $("#menu-icon").hover(function () {
            $(this).addClass("text-info");
        }, function () {
            $(this).removeClass("text-info");
        });

        $("#debug").click(function () {
            $("#messageCode").toggleClass("not-hidden");
        });

        $("#nightmode").change(function () {
            $("html").toggleClass("night");
        });

        $("#fullscreen").click(function () {
            var elem = document.body; // Make the body go full screen.
            requestFullScreen(elem);
        });
    });

    $(function () {

        var cockpitConfigs = [
            {
                title: "[ST/Amiga] F-16 Combat Pilot",
                panelRows: [
                    {
                        panels: [
                            {
                                title: "Control",
                                controls: [
                                    { type: "button", label: "Dogfight", press: "MFD.DogfightMode" },
                                    { type: "button-red", label: "Jett.<br>Fuel", press: "Stores.Jettison.Fuel", decoration: "hazard" },
                                    { type: "button-red", label: "Jett.<br>All", press: "Stores.Jettison.All", decoration: "hazard" }
                                ]
                            },
                            {
                                title: "UFCP",
                                controls: [
                                    { type: "knob", label: "Mode", turn: "UFCP.Mode" },
                                    { type: "knob", label: "Channel", turn: "UFCP.Channel" },
                                    { type: "button", label: "Auto<br>Pilot", press: "UFCP.AutoPilot" },
                                    { type: "switch", label: "Recce<br>Pod", flip: "UFCP.ReccePod" }
                                ]
                            },
                            {
                                title: "Radio",
                                controls: [
                                    { type: "button", label: "Callsign", press: "Radio.Callsign" },
                                    { type: "button", label: "Req<br>GCA", press: "Radio.RequestGCA" }
                                ]
                            },
                            {
                                decoration: "none",
                                controls: [
                                    { type: "handle", label: "Pull to eject", pull: "Controls.Eject", decoration: "hazard" }
                                ]
                            }
                        ]
                    },
                    {
                        panels: [
                        ]
                    }
                ]
            },
            {
                title: "[ST/Amiga] F-19 Stealth Fighter",
                panelRows: [
                    {
                        panels: [
                            {
                                title: "HUD",
                                controls: [
                                    { type: "knob", label: "Mode", turn: "HUD.Mode" },
                                    { type: "switch", label: "ILS", flip: "HUD.ILS" }
                                ]
                            },
                            {
                                title: "Left MFD",
                                controls: [
                                    { type: "button", label: "Mode", press: "MFD.L.Change" },
                                    { type: "button-h", label: "Zoom", left: "MFD.L.Zoom.In", right: "MFD.L.Zoom.Out" }
                                ]
                            },
                            {
                                title: "Right MFD",
                                controls: [
                                    { type: "button", label: "Data", press: "MFD.R.Data" },
                                    { type: "button", label: "Ord", press: "MFD.R.Ordnance" },
                                    { type: "button", label: "Dmg", press: "MFD.R.Damage" },
                                    { type: "button", label: "Way p", press: "MFD.R.Waypoints" },
                                    { type: "button", label: "Miss", press: "MFD.R.Mission" }
                                ]
                            },
                            {
                                title: "Countermeasures",
                                controls: [
                                    { type: "button", label: "Flare", press: "Defence.Flare" },
                                    { type: "button", label: "Chaff", press: "Defence.Chaff" },
                                    { type: "switch", label: "IR Jam", flip: "Defence.IRJam" },
                                    { type: "switch", label: "ECM", flip: "Defence.ECM" },
                                    { type: "button", label: "Decoy", press: "Defence.Decoy" }
                                ]
                            }
                        ]
                    },
                    {
                        panels: [
                            {
                                align: "left",
                                controls: [
                                    { type: "throttle", up: "Controls.Throttle.Up", down: "Controls.Throttle.Down", max: "Controls.Throttle.Max", min: "Controls.Throttle.Min" }
                                ]
                            },
                            {
                                title: "Control",
                                controls: [
                                    { type: "switch", label: "Gear", flip: "Controls.Gear" },
                                    { type: "switch", label: "Auto Pilot", flip: "Controls.AutoPilot" },
                                    { type: "switch", label: "Flaps", flip: "Controls.Flaps" },
                                    { type: "switch", label: "Brakes", flip: "Controls.Brakes" },
                                    { type: "button", label: "Stick", press: "Controls.StickSensitivity" }
                                ]
                            },
                            {
                                title: "Target",
                                controls: [
                                    { type: "button", label: "Select", press: "Target.Select" },
                                    { type: "button", label: "Des", press: "Target.Designate" }
                                ]
                            },
                            {
                                title: "Weapons",
                                controls: [
                                    { type: "knob", label: "Select", turn: "Weapon.Select" },
                                    { type: "button-red", label: "Pickle", press: "Weapon.Drop", decoration: "hazard" },
                                    { type: "button-red", label: "Gun", press: "Weapon.FireGun", decoration: "hazard" },
                                    { type: "switch", label: "Bay", flip: "Weapon.Bay" }
                                ]
                            },
                            {
                                title: "Camera",
                                controls: [
                                    { type: "button-dpad", up: "Camera.Front", down: "Camera.Rear", left: "Camera.Left", right: "Camera.Right" },
                                ]
                            },
                            {
                                title: "Waypoint Edit",
                                align: "right",
                                orientation: "vertical",
                                controls: [
                                    {
                                        type: "subpanel",
                                        controls: [
                                            { type: "button", label: "Edit", press: "Waypoint.Edit" },
                                            { type: "button", label: "Reset", press: "Waypoint.Reset" }
                                        ]
                                    },
                                    { type: "button-h", label: "Select", left: "Waypoint.Select.Previous", right: "Waypoint.Select.Next" },
                                    { type: "button-dpad", label: "Move", up: "Waypoint.Move.Up", down: "Waypoint.Move.Down", left: "Waypoint.Move.Left", right: "Waypoint.Move.Right" }
                                ]
                            }
                        ]
                    },
                    {
                        panels: [
                            {
                                decoration: "none",
                                controls: [
                                    { type: "handle", label: "Pull to eject", pull: "Controls.Eject", decoration: "hazard" },
                                ]
                            }
                        ]
                    },
                    {
                        panels: [
                            {
                                title: "Game",
                                controls: [
                                    { type: "button", label: "Quit", press: "Game.Quit" },
                                    { type: "button", label: "Resupply", press: "Game.Resupply" },
                                    { type: "button", label: "Pause", press: "Game.Pause" },
                                    { type: "switch", label: "Accel", on: "Game.Time.Accelerate", off: "Game.Time.Normal" }
                                ]
                            },
                            {
                                title: "View",
                                controls: [
                                    { type: "button", label: "Cockpit", press: "View.Cockpit" },
                                    { type: "button", label: "Slot", press: "View.External.Slot" },
                                    { type: "button", label: "Chase", press: "View.External.ChasePlane" },
                                    { type: "button", label: "Side", press: "View.External.Side" },
                                    { type: "button", label: "Missile", press: "View.External.Missile" },
                                    { type: "button", label: "Tac", press: "View.External.Tactical" },
                                    { type: "button", label: "Rev Tac", press: "View.External.ReverseTactical" },
                                    { type: "switch", label: "Angle", flip: "View.Angle" }
                                ]
                            },
                            {
                                title: "Head",
                                controls: [
                                    { type: "button-dpad", label: "Head", up: "View.Head.Front", down: "View.Head.Rear", left: "View.Head.Left", right: "View.Head.Right" }
                                ]
                            }
                        ]
                    }
                ]
            }
        ];

        setupConfigMenu(cockpitConfigs);
    });

</script>
